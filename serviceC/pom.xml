<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.9</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.academy.cic</groupId>
	<artifactId>serviceC</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>serviceC</name>
	<description>Primo esercizio</description>
	
	<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>2021.0.5</spring-cloud.version>
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!-- 
		Eureka: Utilizzato per la client-side server discovery, permette ai servizi di comunicare
				tra di loro senza scrivere in maniera hard-coded l'hostname e la porta 
		-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		
		<!-- Actuator: Actuator espone una serie di endpoint REST per accedere a informazioni sull'applicazione, 
		come la salute dell'applicazione, le metriche, le informazioni sulle proprietà di configurazione e altro ancora. -->
		<dependency>
		 	<groupId>org.springframework.boot</groupId>
		 	<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		
		<!-- Spring Cloud Circuitbreaker-->
		<dependency>
		    <groupId>org.springframework.cloud</groupId>
		    <artifactId>spring-cloud-starter-circuitbreaker-reactor-resilience4j</artifactId>
		</dependency>
		
		<!-- Micrometer offre un'astrazione comune per la raccolta di metriche attraverso diversi sistemi di monitoraggio, 
		come Graphite, Prometheus, InfluxDB e molti altri 
		<dependency>
		  <groupId>io.micrometer</groupId>
		  <artifactId>micrometer-core</artifactId>
		</dependency> 
		-->
		
		<!-- É una dipendenza che integra il circuit breaker Resilience4j con micrometer -->
		<dependency>
            <groupId>io.github.resilience4j</groupId>
            <artifactId>resilience4j-micrometer</artifactId>
        </dependency>
		
		<!-- fornisce un'implementazione del registro di micrometri che esporta le metriche nel formato richiesto da Prometheus -->
		<dependency>
		    <groupId>io.micrometer</groupId>
		    <artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		
		<!-- Dipendenza per il driver JDBC MySQL. Quest'ultimo e' necessario per interagire con il database MySQL utilizzando Java -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.32</version>
		</dependency>
	
		<!-- Permette di utilizzare le classi e le funzionalità di Hibernate Core nel proprio codice Java -->
		<dependency>
		  <groupId>org.hibernate</groupId>
		  <artifactId>hibernate-core</artifactId>
		</dependency>
		
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
